generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  verificationCode String?
  verificationCodeExpires DateTime?
  image           String?
  role            String    @default("user")
  phone           String?
  address         String?
  password        String?
  accounts        Account[]
  sessions        Session[]
  orders          Order[] @relation("OrderUser")
  addresses       Address[]
  cart            Cart?
  reviews         Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, code])
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  price           Float
  image           String
  stock           Int
  categoryId      String
  brandId         String
  carBrand        String
  carModel        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orderItems      OrderItem[]
  reviews         Review[]
  partNumber      String
  cartItems       CartItem[]
  compatibilities VehicleCompatibility[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  // products    Product[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  // products    Product[]
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  postalCode String
  country   String
  isDefault Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  orders    Order[] @relation("OrderAddress")
}

model Vehicle {
  id            String   @id @default(cuid())
  make          String
  model         String
  year          Int
  engine        String?
  compatibilities VehicleCompatibility[]
}

model VehicleCompatibility {
  id        String   @id @default(cuid())
  productId String
  vehicleId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([productId, vehicleId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  addressId String
  status    String      @default("pending")
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation("OrderUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address   Address     @relation("OrderAddress", fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
} 